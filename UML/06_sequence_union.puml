@startuml sequence_union
!theme plain
title TDMS - Sequence Diagram: Union Tables

actor User
participant "Web UI" as UI
participant "FastAPI\nEndpoint" as API
participant "Database" as DB
participant "Operations" as Ops
participant "Table" as Table
participant "Row" as Row

User -> UI: Select two tables\nfor union
activate UI
UI -> UI: Get selected table names

User -> UI: Click "Union Tables"
UI -> API: POST /union_tables\n{table1_name, table2_name}
activate API

API -> DB: get_table(table1_name)
activate DB
DB -> Table: Return table1
deactivate DB

API -> DB: get_table(table2_name)
activate DB
DB -> Table: Return table2
deactivate DB

API -> Ops: union_tables(table1, table2)
activate Ops

' Schema compatibility check
Ops -> Table: table1.schema
activate Table
Table -> Ops: Return schema1
deactivate Table

Ops -> Table: table2.schema
activate Table
Table -> Ops: Return schema2
deactivate Table

Ops -> Ops: Check schema compatibility
note right
  For overlapping columns:
  - Names must match
  - Types must be identical
  - Order preserved from table1
end note

alt Schemas compatible
  Ops -> Ops: Build combined schema
  note right
    1. Keep all columns from table1
    2. Add unique columns from table2
    3. Preserve column order
  end note
  
  Ops -> Table: Table.from_schema(name, combined_schema)
  activate Table
  Table -> Table: Create empty result table
  Table -> Ops: Return result_table
  deactivate Table
  
  ' Copy rows from table1
  Ops -> Table: table1.get_rows()
  activate Table
  Table -> Ops: Return rows1
  deactivate Table
  
  loop For each row in table1
    Ops -> Ops: Fill missing columns with None
    Ops -> Row: new Row(values)
    activate Row
    Row -> Ops: Return row
    deactivate Row
    Ops -> Table: result_table.rows.append(row)
  end
  
  ' Copy rows from table2
  Ops -> Table: table2.get_rows()
  activate Table
  Table -> Ops: Return rows2
  deactivate Table
  
  loop For each row in table2
    Ops -> Ops: Fill missing columns with None
    Ops -> Row: new Row(values)
    activate Row
    Row -> Ops: Return row
    deactivate Row
    Ops -> Table: result_table.rows.append(row)
  end
  
  Ops -> API: Return result_table
  deactivate Ops
  
  API -> DB: tables[result_name] = result_table
  activate DB
  DB -> DB: Store union result
  deactivate DB
  
  API -> UI: 200 OK\n{success: true, result_table}
  deactivate API
  
  UI -> UI: Display union result
  UI -> User: Show new table\nwith combined data
  
else Schemas incompatible
  Ops -> API: Raise ValueError\n"Incompatible schemas"
  API -> UI: 400 Bad Request\n{error: details}
  UI -> User: Show error:\n"Tables have incompatible schemas"
end

deactivate UI

@enduml