@echo off
cd /d "%~dp0"

echo ========================================
echo    TDMS Environment Setup Script
echo ========================================
echo.
echo This script will:
echo - Create Python virtual environment
echo - Install all required dependencies
echo - Set up configuration files
echo - Prepare for both web and desktop usage
echo.

REM Check if Python is available
python --version >nul 2>&1
if errorlevel 1 (
    echo ERROR: Python is not installed or not in PATH
    echo Please install Python 3.7+ from https://python.org
    echo Make sure to check "Add Python to PATH" during installation
    pause
    exit /b 1
)

echo ✓ Python found
python --version

echo.
echo ========================================
echo Step 1: Creating Virtual Environment
echo ========================================

REM Remove existing venv if it exists
if exist "venv" (
    echo Removing existing virtual environment...
    rmdir /s /q venv
)

echo Creating new virtual environment...
python -m venv venv
if errorlevel 1 (
    echo ERROR: Failed to create virtual environment
    echo Make sure you have sufficient permissions
    pause
    exit /b 1
)

echo ✓ Virtual environment created

echo.
echo ========================================
echo Step 2: Activating Environment
echo ========================================

call venv\Scripts\activate.bat
if errorlevel 1 (
    echo ERROR: Failed to activate virtual environment
    pause
    exit /b 1
)

echo ✓ Virtual environment activated

echo.
echo ========================================
echo Step 3: Upgrading pip
echo ========================================

python -m pip install --upgrade pip
if errorlevel 1 (
    echo WARNING: Failed to upgrade pip, continuing anyway...
)

echo ✓ pip upgraded

echo.
echo ========================================
echo Step 4: Installing Core Dependencies
echo ========================================

echo Installing FastAPI and web dependencies...
pip install fastapi[all]
if errorlevel 1 (
    echo ERROR: Failed to install FastAPI
    pause
    exit /b 1
)

echo Installing PyWebView for desktop...
pip install pywebview
if errorlevel 1 (
    echo ERROR: Failed to install PyWebView
    pause
    exit /b 1
)

echo Installing configuration management...
pip install python-dotenv
if errorlevel 1 (
    echo ERROR: Failed to install python-dotenv
    pause
    exit /b 1
)

echo Installing testing framework...
pip install pytest pytest-cov pytest-html
if errorlevel 1 (
    echo WARNING: Failed to install testing dependencies
)

echo Installing additional web server...
pip install uvicorn
if errorlevel 1 (
    echo WARNING: Failed to install uvicorn
)

echo ✓ All dependencies installed

echo.
echo ========================================
echo Step 5: Installing Windows WebView Engine
echo ========================================

echo Installing Edge WebView2 support for PyWebView...
pip install pywebview[cef] 2>nul
if errorlevel 1 (
    echo Note: CEF support not available, using system WebView
    echo This is normal on some systems
)

echo ✓ WebView engine configured

echo.
echo ========================================
echo Step 6: Creating Configuration Files
echo ========================================

REM Create .env file if it doesn't exist
if not exist ".env" (
    echo Creating .env configuration file...
    (
        echo # TDMS Configuration File
        echo # Generated by setup_env.bat
        echo.
        echo # Google OAuth Credentials for Web Application
        echo GOOGLE_OAUTH_CLIENT_ID=your_web_client_id_here
        echo GOOGLE_OAUTH_CLIENT_SECRET=your_web_client_secret_here
        echo.
        echo # Google OAuth Credentials for Desktop Application
        echo DESKTOP_GOOGLE_OAUTH_CLIENT_ID=your_desktop_client_id_here
        echo DESKTOP_GOOGLE_OAUTH_CLIENT_SECRET=your_desktop_client_secret_here
        echo.
        echo # Google Picker API Configuration
        echo GOOGLE_PICKER_APP_ID=your_picker_app_id_here
        echo.
        echo # Optional: Google API Key ^(for enhanced features^)
        echo GOOGLE_API_KEY=
        echo.
        echo # Database Configuration
        echo DATABASE_DIR=databases
        echo.
        echo # Server Configuration
        echo WEB_PORT=8000
        echo DESKTOP_PORT_START=8001
    ) > .env
    echo ✓ Created .env configuration file
) else (
    echo ✓ .env file already exists
)

REM Create databases directory
if not exist "databases" (
    mkdir databases
    echo ✓ Created databases directory
) else (
    echo ✓ databases directory already exists
)

REM Create desktop_databases directory
if not exist "desktop_databases" (
    mkdir desktop_databases
    echo ✓ Created desktop_databases directory
) else (
    echo ✓ desktop_databases directory already exists
)

echo.
echo ========================================
echo Step 7: Verifying Installation
echo ========================================

echo Testing FastAPI import...
python -c "import fastapi; print('✓ FastAPI:', fastapi.__version__)" 2>nul
if errorlevel 1 (
    echo ✗ FastAPI import failed
    set SETUP_ERROR=1
) else (
    echo ✓ FastAPI working
)

echo Testing PyWebView import...
python -c "import webview; print('✓ PyWebView: OK')" 2>nul
if errorlevel 1 (
    echo ✗ PyWebView import failed
    set SETUP_ERROR=1
) else (
    echo ✓ PyWebView working
)

echo Testing python-dotenv import...
python -c "import dotenv; print('✓ python-dotenv: OK')" 2>nul
if errorlevel 1 (
    echo ✗ python-dotenv import failed
    set SETUP_ERROR=1
) else (
    echo ✓ python-dotenv working
)

echo Testing TDMS core modules...
python -c "from src.core.database import Database; print('✓ TDMS core modules: OK')" 2>nul
if errorlevel 1 (
    echo ✗ TDMS core import failed
    set SETUP_ERROR=1
) else (
    echo ✓ TDMS core working
)

echo.
echo ========================================
echo Step 8: Setup Complete
echo ========================================

if defined SETUP_ERROR (
    echo ⚠️  Setup completed with some errors
    echo Some features may not work properly
    echo.
) else (
    echo ✅ Setup completed successfully!
    echo.
)

echo 📁 Project Structure:
echo   ├── venv\                 # Virtual environment
echo   ├── src\                  # Source code
echo   ├── databases\            # Web app databases
echo   ├── desktop_databases\    # Desktop app databases  
echo   ├── tests\                # Unit tests
echo   ├── .env                  # Configuration file
echo   ├── desktop.bat            # Desktop launcher
echo   ├── run_server.py         # Web server launcher
echo   └── unit_test.bat         # Test runner
echo.

echo 🚀 Ready to Use:
echo.
echo   Desktop Application:
echo     desktop.bat
echo.
echo   Web Application:
echo     python run_server.py
echo     ^(Access at http://localhost:8000^)
echo.
echo   Run Tests:
echo     unit_test.bat
echo.

echo 📝 Next Steps:
echo   1. Edit .env file with your Google OAuth credentials
echo   2. See SETUP_GUIDE.md for credential setup instructions
echo   3. Run desktop.bat to start desktop app
echo   4. Or run "python run_server.py" for web app
echo.

echo ========================================
echo Environment setup complete!
echo ========================================

pause
